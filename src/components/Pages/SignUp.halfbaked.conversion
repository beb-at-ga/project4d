import React, { useState } from 'react';
import { navigate } from '@reach/router';
import { Link } from 'gatsby';
import { Auth } from 'aws-amplify';
import NumberFormat from 'react-number-format';

import {
  AuthForm,
  Email,
  Password,
  ConfirmationCode,
  GivenName,
  FamilyName,
} from '../Forms';

const SignUp = () => {
  const [username, setUsername] = useState('');
  const [given_name, setGiven_name] = useState('');
  const [family_name, setFamily_name] = useState('');
  const [password, setPassword] = useState('');
  const [email, setEmail] = useState('');
  const [phone_number, setPhone_number] = useState();
  const [auth_code, setAuth_code] = useState('');
  const [stage, setStage] = useState(0);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  // const [name, setName] = useState('');

  // const handleUpdate = event => {
  //   if (event.target.name === 'email') {
  //     console.log(`handling email event update: ${event.target.value}`)
  //     setUsername(event.target.value);
  //     setEmail(event.target.value);
  //     setError('');

  //     // setState({
  //     //   [event.target.name]: event.target.value,
  //     //   username: event.target.value,
  //     //   error,
  //     // })
  //   }

  //   // if (event.target.name === 'phone_number') {
  //   //   console.log(event.target.value);
  //   //   // setPhone_number(event.target.value.replace(/\D/g, ''));
  //   //   setError('');

  //   //   // this.setState({
  //   //   //   [event.target.name]: event.target.value.replace(/\D/g, ''),
  //   //   //   error: '',
  //   //   // })
  //   // }
  //   const [list, setList] = useState({ [uuid()] : [] });
  //   [event.target.name] = event.target.value;
  //   setError('');

  //   // this.setState({
  //   //   [event.target.name]: event.target.value,
  //   //   error: '',
  //   // })
  // };


  const handleUpdate = (setFunction, event) => {
    
    const value = event.target.value;
    console.log('helloooo');
    setFunction(value);

}



  const signUp = async e => {
    e.preventDefault();
    // const { username, password, email, phone_number, given_name, family_name } = this.state
    setLoading(true);

    try {
      await Auth.signUp({
        username,
        password,
        attributes: { email, phone_number, given_name, family_name },
      });
      setStage(1);
      setLoading(false);

      // this.setState({ stage: 1, loading: false })
    } catch (err) {
      setError(err);
      setLoading(false);

      // this.setState({ error: err, loading: false })
      console.log('error signing up...', err);
    }
  };

  const resendCode = async e => {
    e.preventDefault();
    // const { email } = this.state
    setLoading(true);

    try {
      await Auth.resendSignUp(email);
      setStage(1);
      setLoading(false);

      // this.setState({ stage: 1, loading: false })
    } catch (err) {
      setError(err);
      setLoading(false);

      // this.setState({ error: err, loading: false })
      console.log('error resending code...', err);
    }
  };

  const verify = async e => {
    e.preventDefault();
    // const { email, auth_code } = this.state

    setLoading(true);

    // this.setState({ loading: true })
    try {
      await Auth.verifyCurrentUserAttributeSubmit(email, auth_code);

      setLoading(false);

      // this.setState({ loading: false })
      navigate('/signin');
    } catch (err) {
      setError(err);
      setLoading(false);

      // this.setState({ error: err, loading: false })
      console.log('error signing up...', err);
    }
  };

  const confirmSignUp = async e => {
    e.preventDefault();
    // this.setState({ loading: true })

    setLoading(true);

    // const { email, auth_code } = this.state
    try {
      setLoading(true);

      // this.setState({ loading: true })
      await Auth.confirmSignUp(email, auth_code);
      setLoading(false);

      // this.setState({ loading: false })
      navigate('/signin');
    } catch (err) {
      setError(err);
      setLoading(false);

      // this.setState({ error: err, loading: false })
      console.log('error confirming signing up...', err);
    }
  };



  if (stage === 0) {
    return (
      <AuthForm title="Create a new account" error={error}>
        <GivenName
          handleUpdate={handleUpdate}
          onChange={(e) => handleUpdate(setGiven_name, e)}

          // email={given_name}
          autoComplete="off"
        />
        <FamilyName
          handleUpdate={handleUpdate}
          // email={family_name}
          autoComplete="off"
        />
        <Email
          handleUpdate={handleUpdate}
          email={email}
          autoComplete="off"
        />
        <Password
          handleUpdate={handleUpdate}
          password={password}
          autoComplete="off"
        />
        <div className="form-group">
          <label htmlFor="enterPhoneNumber">Phone Number</label>
          <NumberFormat
            placeholder="+1 (###) ###-####"
            onChange={handleUpdate}
            name="phone_number"
            value={phone_number}
            type="tel"
            className="form-control"
            format="+1##########"
            mask="_"
            id="enterPhoneNumber"
          />
        </div>
        <button
          onClick={e => this.signUp(e)}
          type="submit"
          className="btn btn-primary btn-block"
          disabled={loading}
        >
          {loading ? null : 'Create Account'}
          {loading && (
            <span
              className="spinner-border spinner-border-sm"
              role="status"
              aria-hidden="true"
            />
          )}
        </button>
        <p style={{ marginTop: 40 }} className="text-center">
          Have an account? <Link to="/signin">Sign in</Link>
        </p>
      </AuthForm>
    );
  }
  return (
    <AuthForm>
      <Email
        handleUpdate={handleUpdate}
        email={email}
        autoComplete="off"
      />
      <ConfirmationCode
        handleUpdate={handleUpdate}
        auth_code={auth_code}
        autoComplete="off"
      />
      <button
        onClick={e => confirmSignUp(e)}
        type="submit"
        className="btn btn-primary btn-block"
        disabled={loading}
      >
        {loading ? null : 'Confirm'}
        {loading && (
          <span
            className="spinner-border spinner-border-sm"
            role="status"
            aria-hidden="true"
          />
        )}
      </button>
      <p style={{ marginTop: 40 }} className="text-center">
        Have an account? <Link to="/signin">Sign in</Link>
      </p>
      <div
        style={{
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
        }}
      >
        <p style={{ marginTop: 20, marginBottom: 20 }} className="text-center">
          Lost your code?
        </p>
        <button
          className="btn btn-link"
          onClick={e => resendCode(e)}
          disabled={loading}
        >
          Resend Code
        </button>
      </div>
    </AuthForm>
  );
};

export default SignUp;
